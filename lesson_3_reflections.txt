# When would you want to use a remote repository rather than keeping all your work local?

First of all keeping a remote repo is like having a secure backup on GitHub. It is always a great idea to have a backup :). 
Secondly, maybe I use a different computer tomorrow or wanna do some changes from my mobile phone while running in the park. Than GitHub seems to be much closer than my local repo.
Last but not least, there are several projects I won't like to work on alone but with my friends. GutHub is a perfect place to keep our shared projects on.

# Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

On GitHub I might want to have only working features or at least a more stable version of my project. Thus, manually deciding when to commit what or to sync the repo seems to be a better idea than just automatically syncing all files and crashing every ten minutes the code.

# Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is just a copy of a foreign github repo to ones own repos on GitHub. A clone is a local copy of a repo on GitHub to my local machine. A branch is just a copy of my commits in one repo.

# What is the benefit of having a copy of the last known state of the remote stored locally?

I ususally prefer working locally. And I want to work with the newest version if possible!

# How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

In very small teams it would probably also be possible to collaborate on bigger projects without using a system like Git and a remote storage like github. Especially when working together in the same room. Nevertheless, when it comes to bigger teams and longer distances, to me it seems very difficult to work on the same files together without something like Git(hub). Maybe if there is a project manager deciding very specifically what the others should do in which way. Oh.. sounds like in many companies :).

# When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I would make changes in a seperate branch either when I start a new epic or project and I want to have a overview about what commits belong to which project or when I want to add features to someone else repo. He probably doesn't want to include everything I do. Thus, it is better to structure my requests with branches.
